/*
	ÒÆÖ²×ÔQQ2015µÇÂ¼±³¾°¶¯»­
	by gaoqiangz@msn.com
*/
Math.PIM2 = Math.PI * 2;
Math.PID2 = Math.PI / 2;
Math.max = function(a,b)
{
	return a > b ? a : b;
}
Math.min = function(a,b)
{
	return a < b ? a : b;
}
Math.randomInRange = function(a, b) {
    return a + (b - a) * Math.random();
};
Math.clamp = function(a, b, c) {
    a = Math.max(a, b);
    return a = Math.min(a, c);
};
namespace CAV
{
	const FRONT = 0;
   const BACK = 1;
   const DOUBLE = 2;

	namespace Utils
	{
		function isNumber(a)
		{
			if(!a) return false;
			var v = a.toFloat(0);
			return !v.isNaN() && v.isFinite();
		}
	}

	class Vector3
	{
		function create(a=0.0, b=0.0, c=0.0)
		{
			return new Array(a,b,c);
		}
		function clone(a)
		{
			return a.clone();
		}
		function setAll(a, b = null, c = null, d = null) 
		{
			a[0] = b || 0;
			a[1] = c || 0;
			a[2] = d || 0;
			return this;
		}
		function setX(a, b)
		{
			a[0] = b || 0;
			return this;
		}
		function setY(a, b)
		{
			a[1] = b || 0;
			return this;
		}
		function setZ(a, b) 
		{
			a[2] = b || 0;
			return this;
		}
		function copy(a, b) 
		{
			a[0] = b[0];
			a[1] = b[1];
			a[2] = b[2];
			return this;
		}
		function add(a, b)
		{
			a[0] += b[0];
			a[1] += b[1];
			a[2] += b[2];
			return this;
		}
		function addVectors(a, b, c)
		{
			a[0] = b[0] + c[0];
			a[1] = b[1] + c[1];
			a[2] = b[2] + c[2];
			return this;
		}
		function addScalar(a, b)
		{
			a[0] += b;
			a[1] += b;
			a[2] += b;
			return this;
		}
		function subtract(a, b)
		{
			a[0] -= b[0];
			a[1] -= b[1];
			a[2] -= b[2];
			return this;
		}
		function subtractVectors(a, b, c)
		{
			a[0] = b[0] - c[0];
			a[1] = b[1] - c[1];
			a[2] = b[2] - c[2];
			return this;
		}
		function subtractScalar(a, b)
		{
			a[0] -= b;
			a[1] -= b;
			a[2] -= b;
			return this;
		}
		function multiply(a, b)
		{
			a[0] *= b[0];
			a[1] *= b[1];
			a[2] *= b[2];
			return this;
		}
		function multiplyVectors(a, b, c)
		{
			a[0] = b[0] * c[0];
			a[1] = b[1] * c[1];
			a[2] = b[2] * c[2];
			return this;
		}
		function multiplyScalar(a, b)
		{
			a[0] *= b;
			a[1] *= b;
			a[2] *= b;
			return this;
		}
		function divide(a, b)
		{
			a[0] /= b[0];
			a[1] /= b[1];
			a[2] /= b[2];
			return this;
		}
		function divideVectors(a, b, c)
		{
			a[0] = b[0] / c[0];
			a[1] = b[1] / c[1];
			a[2] = b[2] / c[2];
			return this;
		}
		function divideScalar(a, b)
		{
			if (b !== 0) {
				a[0] /= b;
				a[1] /= b;
				a[2] /= b;
			} else {
				a[0] = 0;
				a[1] = 0;
				a[2] = 0;
			}
			return this;
		}
		function cross(a, b)
		{
			var c = a[0],
			d = a[1],
			e = a[2];
			a[0] = d * b[2] - e * b[1];
			a[1] = e * b[0] - c * b[2];
			a[2] = c * b[1] - d * b[0];
			return this;
		}
		function crossVectors(a, b, c)
		{
			a[0] = b[1] * c[2] - b[2] * c[1];
			a[1] = b[2] * c[0] - b[0] * c[2];
			a[2] = b[0] * c[1] - b[1] * c[0];
			return this;
		}
		function min(a, b)
		{
			a[0] < b && (a[0] = b);
			a[1] < b && (a[1] = b);
			a[2] < b && (a[2] = b);
			return this;
		}
		function max(a, b)
		{
			a[0] > b && (a[0] = b);
			a[1] > b && (a[1] = b);
			a[2] > b && (a[2] = b);
			return this;
		}
		function clamp(a, b, c)
		{
			this.min(a, b);
			this.max(a, c);
			return this;
		}
		function limit(a, b, c)
		{
			var d = this.length(a);
			b !== null && d < b ? this.setLength(a, b) : c !== null && d > c && this.setLength(a, c);
			return this;
		}
		function dot(a, b)
		{
			return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
		}
		function normalise(a)
		{
			return this.divideScalar(a, this.length(a));
		}
		function negate(a)
		{
			return this.multiplyScalar(a, -1);
		}
		function distanceSquared(a, b)
		{
			var c = a[0] - b[0],
			d = a[1] - b[1],
			e = a[2] - b[2];
			return c * c + d * d + e * e;
		}
		function distance(a, b)
		{
			return Math.sqrt(this.distanceSquared(a, b));
		}
		function lengthSquared(a)
		{
			return a[0] * a[0] + a[1] * a[1] + a[2] * a[2];
		}
		function length(a)
		{
			return Math.sqrt(this.lengthSquared(a));
		}
		function setLength(a, b)
		{
			var c = this.length(a);
			c !== 0 && b !== c && this.multiplyScalar(a, b / c);
			return this;
		}
	}
	class Vector4
	{
		function create(a=0.0, b=0.0, c=0.0)
		{
			return new Array(a,b,c,0.0);
		}
		function setAll(a, b = null, c = null, d = null, e = null)
		{
			a[0] = b || 0;
			a[1] = c || 0;
			a[2] = d || 0;
			a[3] = e || 0;
			return this;
		}
		function setX(a, b)
		{
			a[0] = b || 0;
			return this;
		}
		function setY(a, b)
		{
			a[1] = b || 0;
			return this;
		}
		function setZ(a, b)
		{
			a[2] = b || 0;
			return this;
		}
		function setW(a, b)
		{
			a[3] = b || 0;
			return this;
		}
		function add(a, b)
		{
			a[0] += b[0];
			a[1] += b[1];
			a[2] += b[2];
			a[3] += b[3];
			return this;
		}
		function multiplyVectors(a, b, c)
		{
			a[0] = b[0] * c[0];
			a[1] = b[1] * c[1];
			a[2] = b[2] * c[2];
			a[3] = b[3] * c[3];
			return this;
		}
		function multiplyScalar(a, b)
		{
			a[0] *= b;
			a[1] *= b;
			a[2] *= b;
			a[3] *= b;
			return this;
		}
		function min(a, b)
		{
			a[0] < b && (a[0] = b);
			a[1] < b && (a[1] = b);
			a[2] < b && (a[2] = b);
			a[3] < b && (a[3] = b);
			return this;
		}
		function max(a, b)
		{
			a[0] > b && (a[0] = b);
			a[1] > b && (a[1] = b);
			a[2] > b && (a[2] = b);
			a[3] > b && (a[3] = b);
			return this;
		}
		function clamp(a, b, c)
		{
			this.min(a, b);
			this.max(a, c);
			return this;
		}
	}
	class Color32
	{
		function this(a=null)
		{
			this.rgba = CAV.Vector4.create();
			this.opacity = CAV.Utils.isNumber(b) ? b : 1;
			this.setAll(a || "#000000");
		}
		function setAll(a)
		{
			var c = Color.parse(a);
			this.rgba[0] = c.r / 255.0;
			this.rgba[1] = c.g / 255.0;
			this.rgba[2] = c.b / 255.0;
			this.rgba[3] = c.opacity;
			return this;
		}
		function format()
		{
			return "rgba(" + 
					Math.ceil(this.rgba[0] * 255.0).toInteger().toString() + "," +
					Math.ceil(this.rgba[1] * 255.0).toInteger().toString() + "," +
					Math.ceil(this.rgba[2] * 255.0).toInteger().toString() + "," +
					this.rgba[3].toString() +
					")";
		}
		function getColor()
		{
			return Color.parse(this.format());
		}
	}
	class Object
	{
		function this()
		{
			this.position = CAV.Vector3.create();
		}
		function setPosition(a, b, c)
		{
			CAV.Vector3.setAll(this.position, a, b, c);
			return this;
		}
	}
	class Light : Object
	{
		function this(a, b)
		{
			super();
			this.ambient = new CAV.Color32(a || "#FFFFFF");
			this.diffuse = new CAV.Color32(b || "#FFFFFF");
			this.ray = CAV.Vector3.create();
		}
	}
	class Vertex
	{
		function this(a=0, b=0, c=0)
		{
			this.position = CAV.Vector3.create(a, b, c);
		}
		function setPosition(a, b, c)
		{
			CAV.Vector3.setAll(this.position, a, b, c);
			return this;
		}
	}
	class Triangle
	{
		function this(a=null, b=null, c=null)
		{
			this.a = a ? a: new CAV.Vertex();
			this.b = b ? b: new CAV.Vertex();
			this.c = c ? c: new CAV.Vertex();
			this.vertices = [this.a, this.b, this.c];
			this.u = CAV.Vector3.create();
			this.v = CAV.Vector3.create();
			this.centroid = CAV.Vector3.create();
			this.normal = CAV.Vector3.create();
			this.color = new CAV.Color32();
			//this.polygon = Element.create({svg,"polygon"});
			//this.polygon.@#stroke-linejoin = "round";
			//this.polygon.@#stroke-miterlimit = "1";
			//this.polygon.@#stroke-width = "1";
			this.computeCentroid();
			this.computeNormal();
		}
		function computeCentroid()
		{
			this.centroid[0] = this.a.position[0] + this.b.position[0] + this.c.position[0];
			this.centroid[1] = this.a.position[1] + this.b.position[1] + this.c.position[1];
			this.centroid[2] = this.a.position[2] + this.b.position[2] + this.c.position[2];
			CAV.Vector3.divideScalar(this.centroid, 3);
			return this;
		}
		function computeNormal()
		{
			CAV.Vector3.subtractVectors(this.u, this.b.position, this.a.position);
			CAV.Vector3.subtractVectors(this.v, this.c.position, this.a.position);
			CAV.Vector3.crossVectors(this.normal, this.u, this.v);
			CAV.Vector3.normalise(this.normal);
			return this;
		}
	}
	class Geometry
	{
		function this()
		{
			this.vertices = [];
			this.triangles = [];
			this.dirty = false;
		}
		function update()
		{
			if (this.dirty)
			{
				var a, b;
				for (a = this.triangles.length - 1; a >= 0; a--) b = this.triangles[a],
				b.computeCentroid(),
				b.computeNormal();
				this.dirty = false
			}
			return this;
		}
	}
	class Plane : Geometry
	{
		function this(a=null, b=null, c=null, d=null)
		{
			super();
			this.width = a || 100;
			this.height = b || 100;
			this.segments = c || 4;
			this.slices = d || 4;
			this.segmentWidth = this.width / this.segments;
			this.sliceHeight = this.height / this.slices;
			var e, f, g, c = [];
			e = this.width * -0.5;
			f = this.height * 0.5;
			for (a = 0; a <= this.segments; a++)
			{
				c.push([]);
				for (b = 0; b <= this.slices; b++)
				{
					d = new CAV.Vertex(e + a * this.segmentWidth, f - b * this.sliceHeight);
					c[a].push(d);
					this.vertices.push(d);
				}
			}
			for (a = 0; a < this.segments; a++)
			{
				for (b = 0; b < this.slices; b++)
				{
					d = c[a + 0][b + 0];
					e = c[a + 0][b + 1];
					f = c[a + 1][b + 0];
					g = c[a + 1][b + 1];
					var t0 = new CAV.Triangle(d, e, f);
					var t1 = new CAV.Triangle(f, e, g);
					this.triangles.push(t0, t1);
				}
			}
		}
	}
	class Material
	{
		function this(a = null, b = null)
		{
			this.ambient = new CAV.Color32(a || "#444444");
			this.diffuse = new CAV.Color32(b || "#FFFFFF");
			this.slave = new CAV.Color32();
		}
	}
	class Mesh : Object
	{
		function this(a, b)
		{
			super();
			this.geometry = a || new CAV.Geometry();
			this.material = b || new CAV.Material();
			this.side = CAV.FRONT;
			this.visible = true;
		}
		function update(a, b)
		{
			var c, d, e, f, g;
			this.geometry.update();
			if (b) for (c = this.geometry.triangles.length - 1; c >= 0; c--)
			{
				d = this.geometry.triangles[c];
				CAV.Vector4.setAll(d.color.rgba);
				for (e = a.length - 1; e >= 0; e--) f = a[e],
				CAV.Vector3.subtractVectors(f.ray, f.position, d.centroid),
				CAV.Vector3.normalise(f.ray),
				g = CAV.Vector3.dot(d.normal, f.ray),
				this.side === CAV.FRONT ? g = Math.max(g, 0) : this.side === CAV.BACK ? g = Math.abs(Math.min(g, 0)) : this.side === CAV.DOUBLE && (g = Math.max(Math.abs(g), 0)),
				CAV.Vector4.multiplyVectors(this.material.slave.rgba, this.material.ambient.rgba, f.ambient.rgba),
				CAV.Vector4.add(d.color.rgba, this.material.slave.rgba),
				CAV.Vector4.multiplyVectors(this.material.slave.rgba, this.material.diffuse.rgba, f.diffuse.rgba),
				CAV.Vector4.multiplyScalar(this.material.slave.rgba, g),
				CAV.Vector4.add(d.color.rgba, this.material.slave.rgba);
				CAV.Vector4.clamp(d.color.rgba, 0, 1);
			}
			return this;
		}
	}
	class Scene
	{
		function this()
		{
			this.meshes = [];
			this.lights = [];
		}
		function add(a)
		{
			a instanceof CAV.Mesh && !~this.meshes.indexOf(a) ? this.meshes.push(a) : a instanceof CAV.Light && !~this.lights.indexOf(a) && this.lights.push(a);
			return this;
		}
		function remove(a)
		{
			a instanceof CAV.Mesh && ~this.meshes.indexOf(a) ? this.meshes.splice(this.meshes.indexOf(a), 1) : a instanceof CAV.Light && ~this.lights.indexOf(a) && this.lights.splice(this.lights.indexOf(a), 1);
			return this;
		}
	}
	class Renderer
	{
		function this()
		{
			this.halfHeight = this.halfWidth = this.height = this.width = 0;
		}
		function setSize(a, b)
		{
			if (a && b && !(this.width === a && this.height === b))
			{
				this.width = a;
				this.height = b;
				this.halfWidth = this.width * 0.5;
				this.halfHeight = this.height * 0.5;
				return this;
			}
		}
	}
	class CanvasRenderer : Renderer
	{
		function this(el)
		{
			super();
			this.element = el;
			this.element.paintContent = :gfx:this super.paintContent(gfx);
			this.updateSize();
		}
		function updateSize()
		{
			var (w,h) = this.element.box(#dimension,#border);
			this.setSize(w,h);
			this.element.refresh();
			return this;
		}
		function render(a)
		{
			this.renderParams = a;
			this.element.refresh();
		}
		function paintContent(gfx)
		{
			if(!this.renderParams) return false;
			//gfx.clearAll();
			//gfx.setTransform(1, 0, 0, -1, this.halfWidth, this.halfHeight);
			//gfx.scale(1,-1);
			gfx.translate(this.halfWidth, this.halfHeight);
			var b, c, d, e, f;
			gfx.lineJoin = Graphics.JOIN_ROUND;
			gfx.strokeWidth(1);
			for (b = this.renderParams.meshes.length - 1; b >= 0; b--)
			{
				c = this.renderParams.meshes[b];
				if (c.visible)
				{
					c.update(this.renderParams.lights, true);
					for (d = c.geometry.triangles.length - 1; d >= 0; d--)
					{
						e = c.geometry.triangles[d];
						f = e.color.getColor();
						var path = new Graphics.Path();
						path.moveTo(e.a.position[0], e.a.position[1])
							.lineTo(e.b.position[0], e.b.position[1])
							.lineTo(e.c.position[0], e.c.position[1])
							.close();
						gfx.strokeColor(f);
						gfx.fillColor(f);
						gfx.drawPath(path);
						path = null;
					}
				}
			}
			return true;
		}
	}
}