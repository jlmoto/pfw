***********************************************************************************************
pfw为Sciter导出了PB接口对象,使TIS脚本可以无缝与PB交互,在使用之前请仔细阅读以下内容说明
***********************************************************************************************
//------------- 导出的对象,按照PB基础对象的继承关系(pfw特有的函数用#表示) -------------//
*******************
PowerObject对象为所有PB对象的基类
支持通过[name]访问内部变量,如:
	var v = obj["var"];
	obj["var"] = "v";
支持遍历特性(iterator),遍历变量名称,如: for(var name in obj)
*******************
class PowerObject
{
	//#判断对象是否有效
	function IsValid()
	//#判断是否有指定名称的变量(属性,子控件,子对象..)
	function HasVar(name)
	//#获取指定名称的变量
	function GetVar(name)
	//#为指定名称的变量赋值
	function SetVar(name,val[,updateview])
	//#获取变量的数量
	function GetVarCount()
	//#获取指定索引的变量名称
	function GetVarName(index)
	//#判断是否有指定名称的函数
	function HasMethod(name,sign)
	//#判断是否有指定名称的事件
	function HasEvent(name,sign)
	//#调用指定函数
	function InvokeMethod(name,sign,...)
	//#调用指定事件
	function InvokeEvent(name,sign,...)
	//#立即释放内部对PB对象的引用(PB GC会根据情况回收该对象的资源)
	function Release()
	//以下为PB函数的映射
	function TypeOf()
	function ClassName()
	function GetParent()
}
class GraphicObject : PowerObject
{
	//#更新指定变量所关联的UI属性(如果你通过SetVar/[name]修改了一个UI相关的变量,你可能需要调用该函数)
	function UpdateView(name)
	//#获取该对象的句柄(只读)
	property Handle()
	//以下为PB函数的映射
	function Show()
	function Hide()
	//以下为PB属性的映射
	property Visible(val)
	property Tag(val)
}
class WindowObject : GraphicObject
{
	//以下为PB函数的映射
	function Move(x,y)
	function Resize(w,h)
}
class DragObject : WindowObject
{
	//#将该对象与指定DOM元素绑定(放入Sciter布局模型)
	function AttachToElement(element)
	//#为该对象设置一个新的父容器(放入这个新的容器中)
	function SetParent(parent)
	//以下为PB函数的映射
	function SetRedraw(redraw)
	function SetFocus()
	function SetPosition(pos[,obj])
	//以下为PB属性的映射
	property X(val)
	property Y(val)
	property Width(val)
	property Height(val)
	property BringToTop(val)
}
class UserObject : GraphicObject
{
	//以下为PB函数的映射
	//打开指定类名的用户对象(返回值为打开的对象)
	function OpenUserObject(cls[,x,y])
	//打开指定类名的用户对象并传递参数(返回值为打开的对象)
	function OpenUserObjectWithParm(cls,parm[,x,y])
	//打开指定用户对象
	function CloseUserObject(uo)
	//以下为PB属性的映射
	property Enabled(val)
	property BackColor(val)
	property Border(val)
	property Control() //(只读)
}
class Window : GraphicObject
{
	//以下为PB函数的映射
	function ParentWindow()
	function SetRedraw(redraw)
	function SetFocus()
	function SetPosition(pos[,obj])
	function SetMicroHelp(txt)
	function GetFirstSheet()
	function GetNextSheet(sheet)
	function GetActiveSheet()
	function WorkSpaceX()
	function WorkSpaceY()
	function WorkSpaceWidth()
	function WorkSpaceHeight()
	//打开指定类名的用户对象(返回值为打开的对象)
	function OpenUserObject(cls[,x,y])
	//打开指定类名的用户对象并传递参数(返回值为打开的对象)
	function OpenUserObjectWithParm(cls,parm[,x,y])
	//打开指定用户对象
	function CloseUserObject(uo)
	//以下为PB属性的映射
	property X(val)
	property Y(val)
	property Width(val)
	property Height(val)
	property BringToTop(val)
	property Enabled(val)
	property BackColor(val)
	property Control() //(只读)
	property Title(val)
	property Icon(val)
	property MenuName(val)
	property MenuID(val)
}
class DataWindow : DragObject
{
	//以下为PB函数的映射
	function Create(syntax)
	function Describe(desc)
	function Modify(mod)
	function GetSQLSelect()
	function SetSQLSelect()
	function SetTransObject(trans)
	function Retrieve([parm,...])
	function ReselectRow(row)
	function GetRow()
	function SetRow(row)
	function GetRowIDFromRow(row[,buffer])
	function GetRowFromRowID(id[,buffer])
	function GetNextModified(row,buffer)
	function GetSelectedRow(row)
	function GetColumn()
	function GetColumnName()
	function SetColumn(col)
	function GetChild(col)
	function GetItemString(row,col[,buffer,original])
	function GetItemNumber(row,col[,buffer,original])
	function GetItemDecimal(row,col[,buffer,original])
	function GetItemDateTime(row,col[,buffer,original])		//返回值为Date对象(对应PB的datetime)
	function GetItemDate(row,col[,buffer,original])			//返回值为Date对象(对应PB的date)
	function GetItemTime(row,col[,buffer,original])			//返回值为Date对象(对应PB的time)
	function GetItemFormattedString(row,col[,buffer,original])
	function GetItemUnformattedString(row,col[,buffer,original])
	function SetItem(row,col,val)
	function GetItemStatus(row,col,buffer)
	function SetItemStatus(row,col,buffer,status)
	function InsertRow(row)
	function DeleteRow(row)
	function SetFilter(filter)
	function Filter()
	function SetSort(sort)
	function Sort()
	function RowsCopy(startrow,endrow,buffer,dest,row,buffer)
	function RowsMove(startrow,endrow,buffer,dest,row,buffer)
	function RowsDiscard(startrow,endrow,buffer)
	function RowCount()
	function ModifiedCount()
	function DeletedCount()
	function FilteredCount()
	function Find(syntax,startrow,endrow[,buffer])
	function GroupCalc()
	function SelectRow(row,select)
	function IsSelected(row)
	function GetFullState() //返回值为Bytes对象(对应PB的blob)
	function SetFullState(blb)
	function GetChanges()	//返回值为Bytes对象(对应PB的blob)
	function SetChanges(blb)
	function ImportFile([type,]filename[,startrow[,endrow[,startcolumn[,endcolumn[,dwstartcolumn]]]]])
	function ImportString([type,]str[,startrow[,endrow[,startcolumn[,endcolumn[,dwstartcolumn]]]]])
	function ShareData(dest)
	function ShareDataOff()
	function AcceptText()
	function Update([accept[,resetflag]])
	function ResetUpdate()
	function Reset()
	//以下为PB属性的映射
	property Enabled(val)
	property Border(val)
	property HScrollBar(val)
	property VScrollBar(val)
	property DataObject(val)
}
class DataStore : PowerObject
{
	//与DataWindow一致,除去不支持的属性和函数,此处省略..
}
class DataWindowChild : PowerObject
{
	//与DataWindow一致,除去不支持的属性和函数,此处省略..
}

//------------- 导出的全局函数(pfw特有的函数用#表示) -------------//
//#获取pfw版本
function Version()
//#获取PB版本
function PBVersion()
//#获取指定枚举类型对应的名称
function EnumName(cls,val)
//#获取指定枚举类型对应的值
function EnumValue(cls,name)
//#判断是否有指定名称的全局变量
function HasGlobalVar(name)
//#获取指定名称的全局变量
function GetGlobalVar(name)
//#设置指定名称的全局变量
function SetGlobalVar(name,val)
//#判断是否有指定名称的全局函数
function HasGlobalFunction(name,sgin)
//#调用指定名称的全局函数
function InvokeGlobalFunction(name,sign,...)
//#创建指定类名的对象(返回值为创建的对象)
function Create(cls)
//#销毁指定对象
function Destroy(object)
//#判断是否为有效的PB对象
function IsValid(object)
//打开指定类名的窗口(返回值为打开的窗口对象)
function Open(cls[,parent])
//打开指定类名的窗口并传递参数(返回值为打开的窗口对象)
function OpenWithParm(cls,parm[,parent])
//打开指定类名的MDI子窗口(返回值为打开的窗口对象)
function OpenSheet(cls,parent[,position[,arrange]])
//打开指定类名的MDI子窗口并传递参数(返回值为打开的窗口对象)
function OpenSheetWithParm(cls,parent,parm[,position[,arrange]])
//关闭指定窗口对象
function Close(wnd)
//关闭指定窗口并返回一个值给调用处(通常是关闭响应窗口)
function CloseWithReturn(wnd,parm)
//消息窗
function MessageBox(title,text,[icon[,button[,default]]])
//#PBU转换为Pixel
function U2PX(pbu)
function U2PY(pbu)
//#Pixel转换为PBU
function P2UX(px)
function P2UY(px)
//DIP转换为Pixel
function D2PX(dip)
function D2PY(dip)
//Pixel转换为DIP
function P2DX(px)
function P2DY(px)
//DIP转换为PBU
function D2UX(dip)
function D2UY(dip)
//PBU转换为DIP
function U2DX(pbu)
function U2DY(pbu)

//------------- 导出的功能对象(pfw特有) -------------//
*******************
ScriptInvoker专门为解决调用引用类型参数的函数或事件而设计
*******************
class ScriptInvoker
{
	//构造函数(参数可以为空,否则与Init函数参数一致)
	function this([[obj,]name,sign[,scripttype]])
	//检查对象是否有效(是否已经绑定了有效的函数)
	function IsValid()
	//初始化绑定到一个对象的函数或事件,或一个全局函数
	//scripttype为symbol值:#function,#event
	function Init([obj,]name,sign[,scripttype])
	//获取参数数量
	function GetArgCount()
	//给指定参数赋值
	function SetArg(index,val)
	//获取指定参数
	function GetArg(index)
	//调用函数
	function Invoke()
	//释放绑定(同时释放内存)
	function Release()
}

//------------- 不支持的特性 -------------//
1.不能访问枚举类型的成员变量(包括全局变量)
	PBNI对枚举类型的属性支持不好,所以你不能通过TIS访问这些属性,如:窗口的WindowState属性
2.不支持多维数组(TIS中只有一维数组)
3.不支持直接调用带引用参数的函数或事件,只能通过pfw映射好的或者ScriptInvoker对象去调用
4.不支持DWObject(这不是标准对象)
5.OLEObject(同DWObject)
6.其它待发现
//------------- 注意事项 -------------//
1.TIS是大小写敏感的
2.当你不再需要某对象时最好手动调用Release函数使其能被PB GC及时回收(Create函数创建的对象建议用Destroy销毁)

//------------- 关于host对象 -------------//
pfw为每个Sciter窗口(控件)定义了一个host对象属性(只读),该对象为当前Sciter宿主PB对象的引用,如:u_sciter,n_sciter,w_sciter
