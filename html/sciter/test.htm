<html>
<head>
<style>
body {
	border-spacing: 2dip;
}
input {
	margin: 2dip;
}
#dwPanel {
	size: 200dip;
}
hr {
	border: 1dip dashed #ccc;
}
</style>
<script type="text/tiscript">
var scWindow;
function test(arg1,arg2,arg3)
{
	view.msgbox("",arg1.toString()+"|"+arg2.toString()+"|"+arg3.toString()+"|");
	return view.test(arg1,arg2,arg3);
	//arg3.SetVar("text","fsafa",true);
	return {key:"value"};
}
function test2(args)
{
	for(var el in args)
	{
		view.msgbox("",el.toString());
	}
}
function self.ready()
{
	//取得窗口对象
	scWindow = host.GetParent();
}
event click $(#test) ()
{
	try
	{
		//view.test("pfw",1,1232.23,new Date(),true,[1,23,23],{key:"value"},$(#test),Bytes.fromString("afasd"));
		//view.msgbox("",view.test2());
		//host.InvokeMethod("","")
		//view.test2();
		view.msgbox("",view.fn()());
	}
	catch (ex)
	{
		view.msgbox("EXCEPTION",ex.message);
	}
}
//dw访问测试
event click $(#dw) ()
{
	try
	{
		//获取窗口上的dw_1和dw_2控件对象的引用
		var dw = scWindow["dw_1"];
		var dw2 = scWindow["dw_2"];
		//创建内存ds,将数据移复制到它里面处理好再移到dw_2
		var ds = Create("datastore");
		ds.Create(dw.Describe("DataWindow.Syntax"));
		dw.RowsCopy(1,dw.RowCount(),#primary,ds,1,#primary);
		var nRowCnt = ds.RowCount();
		var nColCnt = ds.Describe("DataWindow.Column.Count").toInteger();
		for(var row = 1;row <= nRowCnt;++row)
		{
			for(var col = 1;col <= nColCnt;++col)
			{
				ds.SetItem(row,col,ds.GetItemString(row,col) + "abcd");
			}
		}
		dw2.Create(dw.Describe("DataWindow.Syntax"));
		ds.RowsMove(1,ds.RowCount(),#primary,dw2,1,#primary);
		//销毁ds
		Destroy(ds);
	}
	catch (ex)
	{
		view.msgbox("EXCEPTION",ex);
	}
}
//dw访问测试SetFullState/GetFullState
event click $(#dw2) ()
{
	try
	{
		//获取窗口上的dw_1和dw_2控件对象的引用
		var dw = scWindow["dw_1"];
		var dw2 = scWindow["dw_2"];
		dw2.SetFullState(dw.GetFullState());
		/*
		//--- 以下代码演示调用dw的GetFullState/SetFullState,每段代码等价 ---//

		//使用pfwInvoker::n_scriptinvoker
		var invoker = Create("n_scriptinvoker");
		invoker.InvokeMethod("init","LXCpowerobject.XSXSXCscriptkind.",dw,"getfullstate","LRO",#scriptfunction);
		invoker.InvokeMethod("invoke","");
		var blbData = invoker.InvokeMethod("getarg","",1);
		invoker.InvokeMethod("release","");
		invoker.InvokeMethod("init","LXCpowerobject.XSXSXCscriptkind.",dw2,"setfullstate","IXO",#scriptfunction);
		invoker.InvokeMethod("setarg","",1,blbData);
		invoker.InvokeMethod("invoke","");
		invoker.Release();
		
		//使用原生ScriptInvoker
		var invoker = new ScriptInvoker(dw,"getfullstate","LRO",#function);
		invoker.Invoke();
		var blbData = invoker.GetArg(1);
		invoker.Release();
		invoker.Init(dw2,"setfullstate","IXO",#function);
		invoker.SetArg(1,blbData);
		invoker.Invoke();
		invoker.Release();
		
		//直接使用pfw导出的函数
		dw2.SetFullState(dw.GetFullState());
		*/
	}
	catch (ex)
	{
		view.msgbox("EXCEPTION",ex);
	}
}
//创建一个DW并将它附加给Sciter
event click $(#createdw) ()
{
	try
	{
		var dw = host.OpenUserObject("u_test_sciter_dw");
		dw.DataObject = "dw_test";
		dw.BringToTop = true;
		//注册ItemChanged事件回调
		dw.InvokeMethod("of_registeritemchanged","",function(row,name,data){
			//view.msgbox(name,data);
			stdout.$n(ItemChanged:{row},{name},{data});
		});
		//附加给DOM元素
		var el = $(#dwPanel);
		dw.AttachToElement(el);
		//将视图滚向该元素
		el.scrollToView();
	}
	catch (ex)
	{
		view.msgbox("EXCEPTION",ex);
	}
}
//ds访问性能测试
event click $(#dsptest) ()
{
	try
	{
		const nRowCnt = 200000;
		var dtBegin = new Date();
		var ds = Create("datastore");
		ds.DataObject = "dw_test";
		var nColCnt = ds.Describe("DataWindow.Column.Count").toInteger();
		for(var row = 1;row <= nRowCnt;++row)
		{
			//InsertRow被调用20W次
			ds.InsertRow(0);
			for(var col = 1;col <= nColCnt;++col)
			{
				//SetItem被调用80W次
				ds.SetItem(row,col,"abcd");
			}
		}
		//释放ds
		Destroy(ds);
		stdout.println(((new Date()).valueOf() - dtBegin.valueOf()).toInteger().toString() + "ms");
	}
	catch (ex)
	{
		view.msgbox("EXCEPTION",ex);
	}
}
//调用窗口函数wf_Test
event click $(#wftest) ()
{
	try
	{
		stdout.println(scWindow.InvokeMethod("wf_Test","","pfwSciter",100,123.456,567.899,["a","b","c","d"],[1,2,3,4],[123.255,424.44,544514.5547,34.5465],[64.554,454,4.469,6547.556]));
	}
	catch (ex)
	{
		view.msgbox("EXCEPTION",ex);
	}
}
//调用窗口事件OnTest
event click $(#ontest) ()
{
	try
	{
		stdout.println(scWindow.InvokeEvent("OnTest","","pfwSciter"));
	}
	catch (ex)
	{
		view.msgbox("EXCEPTION",ex);
	}
}
//获取窗口成员变量列表
event click $(#listprop) ()
{
	try
	{
		var varList = "";
		//遍历窗口成员变量
		for(var v in scWindow)
		{
			varList += v + "\n";
		}
		stdout.println(varList);
	}
	catch (ex)
	{
		view.msgbox("EXCEPTION",ex);
	}
}
//获取窗口标题
event click $(#gettitle) ()
{
	try
	{
		stdout.println(scWindow.Title);
	}
	catch (ex)
	{
		view.msgbox("EXCEPTION",ex);
	}
}
//设置窗口标题
event click $(#settitle) ()
{
	try
	{
		scWindow.Title = "new Title";
	}
	catch (ex)
	{
		view.msgbox("EXCEPTION",ex);
	}
}
//设置窗口大小
event click $(#setwidth) ()
{
	try
	{
		scWindow.Width += 20;
	}
	catch (ex)
	{
		view.msgbox("EXCEPTION",ex);
	}
}
//打开UserObject
var uo_test;
event click $(#openuo) ()
{
	try
	{
		if(!IsValid(uo_test))
		{
			uo_test = scWindow.OpenUserObject("u_cst_tabpage_control_shortcutbar_blb");
		}
	}
	catch (ex)
	{
		view.msgbox("EXCEPTION",ex);
	}
}
//关闭UserObject
event click $(#closeuo) ()
{
	try
	{
		if(IsValid(uo_test))
		{
			scWindow.CloseUserObject(uo_test);
		}
	}
	catch (ex)
	{
		view.msgbox("EXCEPTION",ex);
	}
}
//打开窗口
var w_demo;
event click $(#openwnd) ()
{
	try
	{
		if(!IsValid(w_demo))
		{
			w_demo = Open("w_demo",scWindow);
			//将窗口还原(不能设置WindowState,只能通过函数来实现,见上面的说明)
			w_demo.InvokeMethod("wf_SetWindowState","",#normal);
		}
	}
	catch (ex)
	{
		view.msgbox("EXCEPTION",ex);
	}
}
//关闭窗口
event click $(#closewnd) ()
{
	try
	{
		if(IsValid(w_demo))
		{
			Close(w_demo);
		}
	}
	catch (ex)
	{
		view.msgbox("EXCEPTION",ex);
	}
}
//关闭本窗口
event click $(#closethis) ()
{
	try
	{
		Close(scWindow);
	}
	catch (ex)
	{
		view.msgbox("EXCEPTION",ex);
	}
}
</script>
</head>
<body>
<input|button#test value="test"></input>
<hr>
<input|button#dw value="dw访问测试"></input>
<input|button#dw2 value="dw访问测试SetFullState/GetFullState"></input>
<input|button#createdw value="创建一个DW并将它附加给Sciter"></input>
<input|button#dsptest value="ds访问性能测试"></input>
<hr>
<input|button#wftest value="调用窗口函数wf_Test"></input>
<input|button#ontest value="调用窗口事件OnTest"></input>
<input|button#listprop value="获取窗口成员变量列表"></input>
<input|button#gettitle value="获取窗口标题"></input>
<input|button#settitle value="设置窗口标题"></input>
<input|button#setwidth value="设置窗口大小"></input>
<hr>
<input|button#openuo value="打开UserObject"></input>
<input|button#closeuo value="关闭UserObject"></input>
<hr>
<input|button#openwnd value="打开窗口"></input>
<input|button#closewnd value="关闭窗口"></input>
<hr>
<input|button#closethis value="关闭本窗口"></input>
<hr>
<div#dwPanel></div>
</body>
</html>

